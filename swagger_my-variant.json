{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "MyVariant.info API",
        "description": "Documentation of the MyVariant.info Variant Query web services. Learn more about [MyVariant.info](http://myvariant.info/)"
    },
    "host": "myvariant.info",
    "schemes": [
        "http"
    ],
    "basePath": "/v1",
    "produces": [
        "application/json"
    ],
    "tags": [
        {
            "name": "query",
            "description": "Make variant query and return matching variant list."
        },
        {
            "name": "variant",
            "description": "Variant annotation information"
        },
        {
            "name": "metadata",
            "description": "Metadata about the data available from MyVariant.info."
        }
    ],
    "paths": {
        "/query": {
            "get": {
                "tags": [
                    "query"
                ],
                "description": "Make variant query and return matching variant list.",
                "operationId": "queryVariant",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "description": "query string. Examples: \"rs58991260\", \"chr1:69000-70000\", \"dbsnp.vartype:snp\". The detailed query syntax can be found at http://docs.myvariant.info/en/latest/doc/variant_query_service.html#query-syntax",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "a comma-separated fields to limit the fields returned from the matching gene hits. The supported field names can be found from any variant object (e.g. http://myvariant.info/v1/variant/chr16:g.28883241A>G). Note that it supports dot notation, and wildcards as well, e.g., you can pass \"dbnsfp\", \"dbnsfp.genename\", or \"dbnsfp.aa.*\". If \"fields=all\", all available fields will be returned.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "the maximum number of matching gene hits to return (with a cap of 1000 at the moment). Default 10.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "the number of matching gene hits to skip, starting from 0. Combining with \"size\" parameter, this can be useful for paging. Default: 0.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "the comma-separated fields to sort on. Prefix with \"-\" for descending order, otherwise in ascending order. Default: sort by matching scores in decending order.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "facets",
                        "in": "query",
                        "description": "a single field or comma-separated fields to return facets, for example, â€œfacets=dbsnp.vartype.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fetch_all",
                        "in": "query",
                        "description": "if TRUE, allows fast retrieval of all unsorted query hits in 1000 hit batches. The return object contains a _scroll_id field, which when passed back to the query endpoint in the scroll_id parameter, returns the next 1000 unordered results.",
                        "type": "string"
                    },
                    {
                        "name": "scroll_id",
                        "in": "query",
                        "description": "athe scroll_id from a previous request with fetch_all = TRUE. When this request is made, the response contains the next 1000 unordered query hits from your query (until no hits are left to return). As the query was supplied in the original query request (with fetch_all = TRUE), the query (q parameter) is ignored if scroll_id is supplied.",
                        "type": "string"
                    },
                    {
                        "name": "callback",
                        "in": "query",
                        "description": "you can pass a \"callback\" parameter to make a JSONP call.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "If you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "query"
                ],
                "description": "Make gene queries in batch.\n",
                "operationId": "queryGenes",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "description": "multiple query terms seperated by comma (also support \"+\" or white space), but no wildcard, e.g., \"q=rs58991260,rs2500\"",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "scopes",
                        "in": "query",
                        "description": "specify one or more fields (separated by comma) as the search \"scopes\", e.g., \"scopes=dbsnp.rsid\", \"scopes=dbsnp.rsid,dbnsfp.genename\". The available \"fields\" can be passed to \"scopes\" parameter are listed here: (coming soon).",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "a comma-separated fields to limit the fields returned from the matching gene hits. The supported field names can be found from any variant object (e.g. http://myvariant.info/v1/variant/chr16:g.28883241A>G). Note that it supports dot notation, and wildcards as well, e.g., you can pass \"dbnsfp\", \"dbnsfp.genename\", or \"dbnsfp.aa.*\". If \"fields=all\", all available fields will be returned. Default: \"all\".",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "If you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/variant/{variantid}": {
            "get": {
                "tags": [
                    "variant"
                ],
                "description": "Retrieve gene annotation based on Entrez or Ensembl gene id, support\nJSONP and CORS as well.\n",
                "operationId": "getVariant",
                "parameters": [
                    {
                        "name": "variantid",
                        "in": "path",
                        "description": "HGVS name based variant id, using genomic location based on hg19 human genome assembly, e.g. chr1:g.35367G>A, chr7:g.55241707G>T, chr16:g.28883241A>G",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "a comma-separated fields to limit the fields returned from the matching gene hits. The supported field names can be found from any variant object (e.g. http://myvariant.info/v1/variant/chr16:g.28883241A>G). Note that it supports dot notation, and wildcards as well, e.g., you can pass \"dbnsfp\", \"dbnsfp.genename\", or \"dbnsfp.aa.*\". If \"fields=all\", all available fields will be returned.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "callback",
                        "in": "query",
                        "description": "you can pass a \"callback\" parameter to make a JSONP call.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "If you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/variant": {
            "post": {
                "tags": [
                    "variant"
                ],
                "description": "Make variant queries in batch for a list of HGVS name based ids\n",
                "operationId": "getVariants",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "multiple variantids seperated by comma, e.g., \"ids=chr1:g.35367C>T,chr7:g.55241707G>T,chr16:g.28883241A>G\". Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "a comma-separated fields to limit the fields returned from the matching gene hits. The supported field names can be found from any variant object (e.g. http://myvariant.info/v1/variant/chr16:g.28883241A>G). Note that it supports dot notation, and wildcards as well, e.g., you can pass \"dbnsfp\", \"dbnsfp.genename\", or \"dbnsfp.aa.*\". If \"fields=all\", all available fields will be returned.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "If you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/metadata": {
            "get": {
                "tags": [
                    "metadata"
                ],
                "description": "Get metadata about the data available from MyVariant.info\n",
                "operationId": "getMetadata",
                "parameters": [
                    {
                        "name": "callback",
                        "in": "query",
                        "description": "you can pass a \"callback\" parameter to make a JSONP call.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/metadata/fields": {
            "get": {
                "tags": [
                    "metadata"
                ],
                "description": "Get metadata about the data available from MyVariant.info\n",
                "operationId": "getMetadataFields",
                "parameters": [
                    {
                        "name": "callback",
                        "in": "query",
                        "description": "you can pass a \"callback\" parameter to make a JSONP call.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        }
    }
}